<?php

/**
 *
 * @return array
 */
function yt_migration_menu() {
  $items['admin/content/migrate/user-subscription-date'] = array(
    'title' => 'Update User subscription Date',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Update User subscription Date Migration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yt_migration_subscription_date_migration_form'),
    'access arguments' => array(MIGRATE_ACCESS_ADVANCED),
    'weight' => 101,
  );
  $items['admin/content/migrate/proximity-search'] = array(
    'title' => 'Proximity Search',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Update experts profile latitude and longitude',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yt_migration_proximity_search_form'),
    'access arguments' => array(MIGRATE_ACCESS_ADVANCED),
    'weight' => 102,
  );
  $items['admin/content/migrate/assign-terms'] = array(
    'title' => 'Assign Terms',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Assign nodes to category',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yt_migration_assign_terms'),
    'access arguments' => array(MIGRATE_ACCESS_ADVANCED),
    'weight' => 103,
  );
  $items['admin/content/migrate/metatags'] = array(
    'title' => 'Updates Metatags',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Bulk updates content metatags',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yt_migration_bulk_update_metatags'),
    'access arguments' => array(MIGRATE_ACCESS_ADVANCED),
    'weight' => 103,
  );  
  $items['admin/content/migrate/assign-roles'] = array(
    'title' => 'Assign Roles',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Assign role to users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yt_migration_assign_roles'),
    'access arguments' => array(MIGRATE_ACCESS_ADVANCED),
    'weight' => 104,
  );
  $items['admin/content/migrate/import-subscription'] = array(
    'title' => 'Subscription Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yt_migration_subscription_import_form'),
    'access arguments' => array(MIGRATE_ACCESS_ADVANCED),
    'description' => 'Import User Subscription',
    'type' => MENU_LOCAL_TASK,
    'weight' => 105,
  );  
  return $items;
}

/**
 * Subscription link import form
 * @param type $form
 * @param type $form_state
 * @return type
 */
function yt_migration_subscription_import_form($form, &$form_state) {
  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('File'),
    '#description' => t('Upload a file, allowed extensions: xlsx'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Subscription import validation
 * @param type $form
 * @param type $form_state
 */
function yt_migration_subscription_import_form_validate($form, &$form_state) {
  $file = file_save_upload('file', array(
    // Validate extensions.
    'file_validate_extensions' => array('xlsx'),
  ));
  // If the file passed validation:
  if ($file) {
    // Move the file into the Drupal file system.
    if ($file = file_move($file, 'public://')) {
      // Save the file for use in the submit handler.
      $form_state['storage']['file'] = $file;
      $form_state['values']['file'] = $file;
    }
    else {
      form_set_error('file', t("Failed to write the uploaded file to the site's file folder."));
    }
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }
}

/**
 * Subscription import submit
 * @param type $form
 * @param type $form_state
 */
function yt_migration_subscription_import_form_submit($form, &$form_state) {
  $file = $form_state['values']['file'];
  $file->filepath = drupal_realpath($file->uri);
  $file->status = FILE_STATUS_PERMANENT;

  file_save($file);
  if(!empty($file->filepath)){
	   _yt_migration_import_subscriptio_id($file->filepath);
       drupal_set_message(t('The form has been submitted and the file has been saved, filename: @filename.', array('@filename' => $file->filename)));
  }  
}

/**
 * Callback function for Update subscription id and subscription date of user.
 * @para $file_path
 */
function _yt_migration_import_subscriptio_id($file_path) {  
  set_time_limit(0);
  module_load_include('inc', 'phpexcel');
  
  // The path to the excel file
  $path = $file_path;
  
  $data = phpexcel_import($path);  
  $results = $data[0];
  $subscription = array();
  $subscriptions =array();
  if( count($results) > 0) {
    foreach($results as $key => $result) {
	  if($result['User IDs']) {   
        $uid = check_plain($result['User IDs']);
		$subs_id = check_plain($result['Subscription IDs']);
		$subs_id = $subs_id ? $subs_id : 0 ;
		$subs_date = $result['Dates for Arjun'];
		$sub_date = ($subs_date) ? PHPExcel_Shared_Date::ExcelToPHP($subs_date) : 0;
		// $unix_date = ($excel_date - 25569) * 86400;
		// $sub_date = gmdate("Y-m-d H:i:s", $unix_date);
		$subscription['uid'] = $uid;
		$subscription['subs_id'] = $subs_id;
		$subscription['sub_date'] = $sub_date;
		$subscriptions[] = array('_yt_migration_import_subscriptio_batch_proccess', array($subscription)); 	    
      } // End of if
      
    } // End of foreach
    
    $batch = array(
      'operations' => $subscriptions,					   
      'finished' => '_yt_migration_import_subscriptio_batch_finished',
      'title' => t('Processing Import...'),
      'init_message' => t('Import is starting.'),
    );
    batch_set($batch);

  } // End of if
}

/**
 * Implement _yt_migration_import_subscriptio_batch_proccess().
 */
function _yt_migration_import_subscriptio_batch_proccess($subscription, &$context) {
  $uid = $subscription['uid'];
  $subs_id = $subscription['subs_id'];
  $sub_date = $subscription['sub_date'];
  if($uid) {
    $account = user_load($uid);
	
	if($account->uid) {	  
	  // Update Subscription date of user.
	  $account->field_commerce_sp_validity = array(LANGUAGE_NONE => array(0 => array('value' => $sub_date)));
      user_save($account);
		  
      $pid = db_query("select pid from {profile} where uid = :uid", array(':uid' => $uid))->fetchField();
	  if($pid) {		
	    // Update Subscription id of user.
        $profile = profile2_load_by_user($account, 'author');      
	    $profile->field_subscription_id = array(LANGUAGE_NONE => array(0 => array('value' => $subs_id)));
	    profile2_save($profile);
	  } // End of if
    } // End of if
  }  // End of if     	
}

/**
 * Implement _yt_migration_import_subscriptio_batch_finished().
 */
function _yt_migration_import_subscriptio_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Subscription has been imported sucessfully.'));
  }
  else {
    drupal_set_message(t('Subscription is not imported properly.'), 'error');
  }  	
}

/**
 * Assign nodes nid to category
 */
function yt_migration_assign_terms($form, &$form_state) {
  $form['nids'] = array(
    '#type' => 'textarea',
    '#title' => t('Node IDs'),
    '#description' => t('Enter comma seperated nids'),
    '#required' => TRUE,
  );
  $form['tids'] = array(
    '#type' => 'textfield',
    '#title' => t('Taxonomy IDs'),
    '#description' => t('Enter term ids'),
    '#required' => TRUE,    
  );
  $form['remove'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove'),
    '#description' => t('Select to remove term from node.'),
    '#default_value' => 0,
  );    
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Updates metatags of content
 */
function yt_migration_bulk_update_metatags($form, &$form_state) {
  $entity_type = 'node';
  //$defaults = metatag_config_load_with_defaults($entity_type);
  //$info = metatag_get_info();
	$options = array(
    'index' => t('Allow search engines to index this page (assumed).'),
    'follow' => t('Allow search engines to follow links on this page (assumed).'),
    'noindex' => t('Prevents search engines from indexing this page.'),
    'nofollow' => t('Prevents search engines from following links on this page.'),
    'noarchive' => t('Prevents cached copies of this page from appearing in search results.'),
    'nosnippet' => t('Prevents descriptions from appearing in search results, and prevents page caching.'),
    'noodp' => t('Blocks the !opendirectory description from appearing in search results.', array('!opendirectory' => l('Open Directory Project', 'http://www.dmoz.org/'))),
    'noydir' => t('Prevents Yahoo! from listing this page in the <a href="@ydir">Yahoo! Directory</a>.', array('@ydir' => 'http://dir.yahoo.com/')),
    'noimageindex' => t('Prevent search engines from indexing images on this page.'),
    'notranslate' => t('Prevent search engines from offering to translation this page in search results.'),
  );
  $form_state['storage'] = array(
    'defaults' => $defaults,
    'info' => $info,
    'entity_type' => $entity_type,
  );
  $form['nids'] = array(
    '#type' => 'textarea',
    '#title' => t('Node IDs'),
    '#description' => t('Enter comma seperated nids'),
    '#required' => TRUE,
  );
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['advanced']['robots'] = array(
    '#type' => 'checkboxes',
    '#required' => TRUE,
    '#title' => t('Robots'),
    '#options' => $options,
    '#description' => t("Provides search engines with specific directions for what to do when this page is indexed."),
  );	
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => 101,
  );
  return $form;    
}

/**
 *
 */
function yt_migration_bulk_update_metatags_validate($form, &$form_state) {

}

/**
 *
 */
function yt_migration_bulk_update_metatags_submit($form, &$form_state) {
	$function = 'yt_migration_bulk_update_content_metatags';
  // Reset counter for debug information.
  $_SESSION['http_request_count'] = 0;
  // Execute the function named yt_migration_bulk_update_content_metatags.
  $batch = $function($form_state);
  batch_set($batch);
}

/**
 *
 */
function yt_migration_bulk_update_content_metatags($form_state) {
	$ids = explode(',', $form_state['values']['nids']);
	$robots = $form_state['values']['robots'];
	$num_operations = count($ids);
	drupal_set_message(t('Creating an array of @num operations', array('@num' => $num_operations)));
	$operations = array();
	foreach($ids as $key => $nid) {
		if(trim($nid) > 0) {
		  $operations[] = array(
		    'yt_migration_bulk_update_metatags_operation',
		    array(
		      $nid,
		      $robots,
		      t('(Operation @operation)', array('@operation' => $key + 1)),
		    ),
		  );
    }
	}
	  $batch = array(
    'operations' => $operations,
    'finished' => 'yt_migration_bulk_update_metatags_finished',
  );
  return $batch;
}

/**
 * 
 */
function yt_migration_bulk_update_metatags_operation($nid, $robots, $operation_details, &$context) {
  $node = node_load($nid, NULL, TRUE);
	if(is_object($node)) {
		$node->metatags[LANGUAGE_NONE]['robots']['value'] = $robots;
		metatag_entity_update($node, 'node');
  	$context['results'][] = $node->nid . ' : ' . check_plain($node->title);
  	cache_clear_all($node->nid, 'cache_entity_node');
  }

  // Optional message displayed under the progressbar.
  $context['message'] = t('Loading node @id - "@title"', array('@id' => $nid, '@title' => isset($node->title) ? $node->title : 'Node not exists')) . ' ' . $operation_details;

  _yt_migration_bulk_update_metatags_set_http_requests();
}

/**
 * Utility function to increment HTTP requests in a session variable.
 */
function _yt_migration_bulk_update_metatags_set_http_requests() {
  $_SESSION['http_request_count']++;
}

/**
 * Utility function to count the HTTP requests in a session variable.
 * 
 * @return int
 *   Number of requests.
 */
function _yt_migration_bulk_update_metatags_get_http_requests() {
  return !empty($_SESSION['http_request_count']) ? $_SESSION['http_request_count'] : 0;
}

function yt_migration_bulk_update_metatags_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(t('@count results processed in @requests HTTP requests.', array('@count' => count($results), '@requests' => _yt_migration_bulk_update_metatags_get_http_requests())));
    drupal_set_message(t('The final result was "%final"', array('%final' => end($results))));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}


/**
 * Assign mentioned categories to node
 */
function yt_migration_assign_terms_submit($form, &$form_state) {
	$node_ids = explode(',', $form_state['values']['nids']);
	$tid = trim($form_state['values']['tids']);
	if ($term = taxonomy_term_load($tid)) {
    if ($term->vid == 4) {
			$field_name = 'field_category';		
		} else {
			drupal_set_message(t('You can assign only Category terms only. @tid ID is not belonging in Category vocabularies.', array('@tid' => $term->tid)));
			drupal_goto('admin/content/migrate/assign-terms');
		}
		if(count($node_ids) > 0) {
			foreach($node_ids as $id => $nid) {
				if($node = node_load($nid)) {
					unset($node->{$field_name}[LANGUAGE_NONE]);
          if($form_state['values']['remove'] == 0) {
            $node->{$field_name}[LANGUAGE_NONE][0]['tid'] = $term->tid;
          }
					node_save($node);
				}
			}
			drupal_set_message('Action on nodes executed successfully.');
		}
	}
}

/**
 * Assign role to users
 */
function yt_migration_assign_roles($form, &$form_state) {
  $form['uids'] = array(
    '#type' => 'textarea',
    '#title' => t('User IDs'),
    '#description' => t('Enter comma seperated uids.'),
    '#required' => TRUE,
  );
  $form['rids'] = array(
    '#type' => 'textfield',
    '#title' => t('Role IDS'),
    '#description' => t('Enter role id'),
    '#required' => TRUE,
  );
  $form['remove'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove'),
    '#description' => t('Select to revoke role from user.'),
    '#default_value' => 0,
  );  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Assign mentioned roles to users
 */
function yt_migration_assign_roles_submit($form, &$form_state) {
	$users_id = explode(',', $form_state['values']['uids']);
	$roles_id = trim($form_state['values']['rids']);
	if(count($users_id) > 0) {
		foreach($users_id as $id => $value) {
			db_delete('users_roles')->condition('uid', $value, '=')->execute();
			if($form_state['values']['remove'] == 0) {
				db_insert('users_roles')->fields(array('uid', 'rid'))->values(array('uid' => $value, 'rid' => $roles_id))->execute();
			}
		}
		if($form_state['values']['remove'] == 0) {
			drupal_set_message('Assign role executed successfully');
		} else {
			drupal_set_message('Revoke role executed successfully');
		}
	}
}

/**
 * Menu callback: confirm update the batch process.
 *
 * @see yt_migration_subscription_date_migration_form_submit()
 * @see yt_migration_menu()
 * @ingroup forms
 */
function yt_migration_subscription_date_migration_form() {
  return confirm_form(array(), t('Are you sure you want to update the user subscription date?'), 'admin/content/migrate', t('This action can update the user subscription date. Please make sure run this batch process after user migration.'), t('Update'), t('Cancel'));
}

/**
 * Menu callback: confirm update the batch process.
 *
 * @see yt_migration_subscription_date_migration_form_submit()
 * @see yt_migration_menu()
 * @ingroup forms
 */
function yt_migration_proximity_search_form() {
  return confirm_form(array(), t('Are you sure you want to excute the proximity search to update the experts profile latitude and longitude?'), 'admin/content/migrate', t('This action can update the user subscription date. Please make sure run this batch process after profile migration.'), t('Update'), t('Cancel'));
}

/**
 * Handler for wipe confirmation
 *
 * @see yt_migration_subscription_date_migration_form()
 */
function yt_migration_subscription_date_migration_form_submit($form, &$form_state) {
  yt_migration_subscription_date_migration_batch_process();
  $form_state['redirect'] = 'admin/content/migrate';
}

/**
 * Handler for wipe confirmation
 *
 * @see yt_migration_subscription_date_migration_form()
 */
function yt_migration_proximity_search_form_submit($form, &$form_state) {
  yt_migration_proximity_search_form_batch_process();
  $form_state['redirect'] = 'admin/content/migrate';
}

/**
 *
 * @param type $batch_mode
 */
function yt_migration_subscription_date_migration_batch_process() {
  $batch = array(
    'title' => t('Update user subscription date.'),
    'operations' => array(
      array('_yt_migration_subscription_date_migration_batch_operation', array()),
    ),
    'finished' => '_yt_migration_subscription_date_migration_batch_finished'
  );
  batch_set($batch);
}

/**
 *
 * @param type $batch_mode
 */
function yt_migration_proximity_search_form_batch_process() {
  $batch = array(
    'title' => t('Update expert profile latitide and longitude basis of office address.'),
    'operations' => array(
      array('_yt_migration_proximity_search_form_batch_operation', array()),
    ),
    'finished' => '_yt_migration_proximity_search_form_batch_finished'
  );
  batch_set($batch);
}

/**
 * subscription date migration
 */
function _yt_migration_subscription_date_migration_batch_operation(&$context) {
  if (empty($context['sandbox'])) {
    // Initiate multistep processing.
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_user'] = 0;
    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT u.uid) FROM {users} u INNER JOIN {profile} p ON p.uid = u.uid INNER JOIN {field_data_field_subscription_id} fd ON fd.entity_id = p.pid')->fetchField();
  }

  // Process the next 20 users.
  $limit = 20;
  $uids = db_query_range("SELECT u.uid FROM {users} u INNER JOIN {profile} p ON p.uid = u.uid INNER JOIN {field_data_field_subscription_id} fd ON fd.entity_id = p.pid WHERE u.uid > :uid ORDER BY u.uid DESC", 0, $limit, array(':uid' => $context['sandbox']['current_user']))->fetchCol();
  $users = user_load_multiple($uids, array(), TRUE);
  foreach ($users as $uid => $user) {
    // loads successfully.
    if (!empty($user)) {
      $user_profile = profile2_load_by_user($user, 'author');
      if (!empty($user_profile)) {
        $field_items = field_get_items('profile2', $user_profile, 'field_subscription_id');
        if (count($field_items) && is_numeric($field_items[0]['value']) && $field_items[0]['value'] != 0) {
          if (variable_get('chargify_api_test_mode', FALSE)) {
            $subscription_id = '6380588';
          }
          else {
            $subscription_id = $field_items[0]['value'];
          }
          $subscription = yt_chargify_subscription_get($subscription_id);
          watchdog('User Subscription Migration', print_r($subscription, TRUE));
          if (is_object($subscription) && isset($subscription->state)) {
            if (($subscription->state == "active") && !empty($subscription->current_period_ends_at->date) && ($subscription_current_period_ends = strtotime($subscription->current_period_ends_at->date)) && !empty($subscription->current_period_started_at->date) && ($subscription_current_period_started = strtotime($subscription->current_period_started_at->date)) && ($subscription_current_period_started >= strtotime("-1 days")) && ($subscription_current_period_ends >= strtotime("now"))) {
              $user->field_commerce_sp_validity['und'][0]['value'] = strtotime($subscription->current_period_ends_at->date);
              user_save((object) array('uid' => $user->uid), (array) $user);
              watchdog('User Subscription Migration', t('User Subcription save for user @uid', array('@uid' => $user->uid)));
            }
          }
        }
      }
    }
    $context['sandbox']['progress'] ++;
    $context['sandbox']['current_user'] = $uid;
  }

  // Multistep processing : report progress.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * subscription date migration
 */
function _yt_migration_proximity_search_form_batch_operation(&$context) {
  module_load_include('inc', 'geocoder', 'plugins/geocoder_handler/google');
  include_once(drupal_get_path('module', 'geofield') . '/includes/GeoGenerator.php');
  $all_entity_info = entity_get_info();
  foreach ($all_entity_info as $entity_type => $entity_info) {
    if ($entity_type == 'profile2') {
      if ($entity_info['fieldable']) {
        foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
          foreach (field_info_instances($entity_type, $bundle_name) as $field_name => $field_instance) {
            $field_info = field_info_field($field_name);
            if ($field_instance['widget']['type'] === 'geocoder') {
              $entity_load = $entity_info['load hook'];
              $query = db_select($entity_info['base table'])
                  ->fields($entity_info['base table'], array($entity_info['entity keys']['id']))
                  ->condition($entity_info['entity keys']['bundle'], $bundle_name);
              $results = $query->execute();
              while ($id = $results->fetchField()) {
                $entity = $entity_load($id);
                $langcode = field_language($entity_type, $entity, $field_name);
                $items = field_get_items($entity_type, $entity, $field_name, $langcode);
                if (count($entity->field_office_address)) {
                  $field_item = array();
                  $options = array();
                  if ($field_info['type'] == 'geofield') {
                    $geo_values = geocoder_widget_get_field_value($entity_type, $field_instance, $entity);
                    $entity->field_latlong[LANGUAGE_NONE] = $geo_values;
                    $entity->original = array();
                    entity_save($entity_type, $entity);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * User subscription date migration finished process
 */
function _yt_migration_subscription_date_migration_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The subscription date has been update sucessfully.'));
  }
  else {
    drupal_set_message(t('The subscription date is not excuted properly.'), 'error');
  }
  cache_clear_all();
}

/**
 * User subscription date migration finished process
 */
function _yt_migration_proximity_search_form_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The experts latitude and longitude has been update sucessfully.'));
  }
  else {
    drupal_set_message(t('The experts latitude and longitude is not excuted properly.'), 'error');
  }
  cache_clear_all();
}

/**
 * Connect Drupal 6 database
 */
function yt_migration_db_connection() {
  global $conf;
  Database::addConnectionInfo('migration', 'default', array(
    'driver' => 'mysql',
    'database' => $conf['drupal6_db']['database'],
    'username' => $conf['drupal6_db']['username'],
    'password' => $conf['drupal6_db']['password'],
    'host' => $conf['drupal6_db']['host'],
    'prefix' => '',
  ));
  return Database::getConnection('default', 'migration');
}

/**
 * Retrieve the url alias
 * associated with the node from the migration database.
 */
function yt_migration_get_url_alias($nid) {
  $connection = yt_migration_db_connection();
  $result = $connection->select('url_alias', 'ua')
      ->fields('ua', array('dst'))
      ->condition('ua.src', 'node/' . $nid, '=')
      ->orderBy('ua.pid', 'DESC')
      ->execute()
      ->fetchObject();

  return is_object($result) && !empty($result->dst) ? $result->dst : NULL;
}

/**
 * Retrieve the url alias
 * associated with the node from the migration database.
 */
function yt_migration_get_page_title($nid) {
  $connection = yt_migration_db_connection();
  $result = $connection->select('page_title', 'pt')
      ->fields('pt', array('page_title'))
      ->condition('pt.id', $nid, '=')
      ->condition('pt.type', 'node', '=')
      ->execute()
      ->fetchObject();

  return is_object($result) && !empty($result->page_title) ? $result->page_title : NULL;
}

/**
 * Retrieve approved content d6
 * associated with the node from the migration database.
 */
function yt_migration_approved_content($nid) {
  $connection = yt_migration_db_connection();
  $result = $connection->select('content_field_approved', 'cp')
      ->fields('cp', array('field_approved_value'))
      ->condition('cp.nid', $nid, '=')
      ->execute()
      ->fetchObject();
  return is_object($result) && !empty($result->field_approved_value) ? $result->field_approved_value : NULL;
}

/**
 * Translate between D6 input
 * format id and D7 text format name.
 */
function yt_migration_get_text_format($format) {
  $output = '';
  switch ($format) {
    case 1:
      $output = 'filtered_html';
      break;
    case 2:
      $output = 'full_html';
      break;
    case 3:
    default:
      $output = 'plain_text';
      break;
    case 4:
      $output = 'php_code';
      break;
  }
  return $output;
}

/**
 * Retrieve the set of term
 * associated with a node from the migration database.
 */
function yt_migration_get_terms($nvid, $tvid) {
  $tids = array();
  $connection = yt_migration_db_connection();
  $query = $connection->select('term_node', 'tn');
  $query->join('term_data', 'td', 'tn.tid = td.tid');
  $query->addField('td', 'tid');
  $query->condition('tn.vid', $nvid, '=');
  $query->condition('td.vid', $tvid, '=');
  $query->orderBy('tn.tid', 'ASC');
  $result = $query->execute()->fetchCol();
  //watchdog('Taxonomy Terms results', print_r($result, TRUE));
  if (is_array($result)) {
    foreach ($result as $id => $tid) {
      $tids[$tid] = $tid;
    }
  }
  // watchdog('Taxonomy Terms', print_r($tids, TRUE));
  return is_array($tids) && !empty($tids) ? $tids : NULL;
}

/**
 * Retrieve the url alias
 * associated with the user from the migration database.
 */
function yt_migration_get_user_alias($uid) {
  $connection = yt_migration_db_connection();
  $result = $connection->select('url_alias', 'ua')
      ->fields('ua', array('dst'))
      ->condition('ua.src', 'user/' . $uid, '=')
      ->execute()
      ->fetchObject();

  return is_object($result) && !empty($result->dst) ? $result->dst : NULL;
}

/**
 * Retrieve the url alias associated with the term from the migration database.
 */
function yt_migration_get_term_alias($tid) {
  $connection = yt_migration_db_connection();

  $actual_page = $connection->select('url_alias', 'ua')
      ->fields('ua', array('dst', 'src'))
      ->condition('ua.src', 'taxonomy/term/' . $tid, '=')
      ->execute()
      ->fetchObject();

  $new_page = $connection->select('url_alias', 'ua')
      ->fields('ua', array('dst', 'src'))
      ->condition('ua.src', 'category/' . $tid, '=')
      ->execute()
      ->fetchObject();

  if (is_object($new_page) && !empty($new_page->dst)) {
    $result = $new_page;
    if (is_object($actual_page) && !empty($actual_page->dst)) {
      $main_alias = array('source' => $actual_page->src, 'alias' => $actual_page->dst);
      path_save($main_alias);
      $check_redirect_old = db_select('redirect', 'r')->fields('r', array('redirect'))->condition('r.source', $new_page->src, '=');
      $check_redirect_old_result = $check_redirect_old->execute()->fetch();
      if (!is_object($check_redirect_old_result) && empty($check_redirect_old_result->redirect)) {
        //Saving dst redirect
        if (!empty($new_page->src) && !empty($result->dst)) {
          $object = array();
          $object['rid'] = '';
          $object['type'] = 'redirect';
          $object['hash'] = '';
          $object['source'] = $new_page->src;
          $object['source_options'] = array();
          $object['redirect'] = $result->dst;
          $object['redirect_options'] = array();
          $object['language'] = LANGUAGE_NONE;
          $object['status_code'] = '0';
          $object['override'] = '';
          $dst = (object) $object;
          redirect_save($dst);
        }
      }
    }
  }
  else {
    $result = $actual_page;
  }

  return is_object($result) && !empty($result->dst) ? $result->dst : NULL;
}

/**
 * Retrieve meta data
 */
function yt_migration_get_metatag_data($id, $object_type = 1) {
  $connection = yt_migration_db_connection();
  $result = $connection->select('tango_meta', 'tm')
      ->fields('tm', array('keywords', 'description', 'title', 'canonical_url', 'website_name'))
      ->condition('tm.object_id', $id, '=')
      ->condition('tm.object_type', $object_type, '=')
      ->execute()
      ->fetchObject();
  return is_object($result) ? $result : NULL;
}

/**
 * Retrieve the associated
 * file details from the migration database.
 */
function yt_migration_get_metatag_title($nid) {
  $connection = yt_migration_db_connection();
  $result = $connection->select('page_title', 'pg')
      ->fields('pg', array('page_title'))
      ->condition('pg.type', 'node', '=')
      ->condition('pg.id', $nid, '=')
      ->execute()
      ->fetchObject();
  return is_object($result) && !empty($result->page_title) ? $result->page_title : NULL;
}

/**
 * Retrieve the associated file
 * details from the migration database.
 */
function yt_migration_get_author_more_rel_details($nid) {
  $result = array();
  $connection = yt_migration_db_connection();
  $query = $connection->select('content_field_more_about_relationship', 'ct')
      ->fields('ct', array('field_more_about_relationship_value'))
      ->condition('ct.nid', $nid, '=');
  $values = $query->execute()->fetchAll();
  return count($values) ? $values : NULL;
}

/**
 * Retrieve the co-author
 * uids from the migration database.
 */
function yt_migration_get_coauthor($nid) {
  $result = array();

  $connection = yt_migration_db_connection();

  $query = $connection->select('content_field_coauthor', 'ca')
      ->fields('ca', array('field_coauthor_uid'))
      ->condition('ca.nid', $nid, '=');

  $values = $query->execute()->fetchAll();

  foreach ($values as $id => $uid) {
    $author[$id] = $uid->field_coauthor_uid;
  }
  return count($author) ? $author : NULL;
}

/**
 * Retrieve the isbn
 * code from the migration database.
 */
function yt_migration_get_isbn($uid) {
  $isbn = array();
  $connection = yt_migration_db_connection();
  $query = $connection->select('node', 'n')->fields('ca', array('field_amazon_asin_value'));
  $query->condition('n.uid', $uid, '=');
  $query->condition('n.type', 'proconnect_amazon_book', '=');
  $query->join('content_type_proconnect_amazon_book', 'ca', 'n.vid = ca.vid');
  $values = $query->execute()->fetchAll();
  //watchdog('Books Id', print_r($values, TRUE));
  foreach ($values as $id => $asin_id) {
    $isbn[$id] = $asin_id->field_amazon_asin_value;
    $asin = amazon_convert_to_asin($asin_id->field_amazon_asin_value);
    //watchdog('Asin', print_r($asin, TRUE));
    $items = amazon_item_lookup_from_web(array($asin));
    //watchdog('Asin Items', print_r($items, TRUE));
    if (!empty($items) && is_array($items)) {
      $amazon_item = array_pop($items);
      //watchdog('Amazon Item', print_r($amazon_item, TRUE));
      amazon_item_delete($amazon_item['asin']);
      amazon_item_insert($amazon_item);
    }
  }
  return count($isbn) ? $isbn : NULL;
}

/**
 * Retrieve the associated proconnect
 * nodes from the migration database.
 * @param type $uid
 */
function yt_migration_get_proconnect_node($uid) {
  $result = array();
  $connection = yt_migration_db_connection();
  $query = $connection->select('node', 'n')
      ->fields('n', array('nid', 'vid', 'title', 'uid', 'status', 'created', 'changed', 'comment', 'promote', 'moderate', 'sticky', 'tnid', 'translate'))
      ->fields('ct', array(
        'field_office_address_lid',
        'field_years_in_practice_value',
        'field_license_owner_value',
        'field_license_state_value',
        'field_license_number_value',
        'field_license_expiration_date_value',
        'field_accept_credit_cards_value',
        'field_accept_insurance_value',
        'field_accept_paypal_value',
        'field_sliding_scale_value',
        'field_fee_range_value',
        'field_free_consultation_value',
        'field_personal_quote_value',
        'field_signature_line_value',
        'field_became_professional_value',
        'field_subscription_id_value',
        'field_education_pro_value',
        'field_alternative_credentials_value',
        'field_medical_credentials_value',
        'field_where_practice_value',
        'field_secondary_address_lid',
        'field_sexual_orientation_value',
        'field_have_children_value',
        'field_specialties_in_qs_value',
        'field_social_linkedin_value',
        'field_social_facebook_value',
        'field_social_myspace_value',
        'field_social_youtube_value',
        'field_hide_address_value',
        'field_processor_value',
        'field_primary_type_of_pro_value',
        'field_verified_value',
        'field_ndn_playlist_id_value',
        'field_proconnect_video_value'))
      ->fields('cw', array('field_work_remotely_how_value'))
      ->fields('cfs', array('field_specialties_value'))
      ->fields('cfl', array('field_languages_value'))
      ->fields('cft', array('field_type_pro_value'))
      ->fields('fcre', array('field_credentials_value'))
      ->fields('cfc', array('field_coaching_orientation_value'))
      ->fields('l', array('name', 'street', 'city', 'province', 'postal_code', 'country', 'latitude', 'longitude', 'source'))
      ->fields('lp', array('phone'))
      ->fields('lf', array('fax'))
      ->fields('ls', array('name', 'street', 'city', 'province', 'postal_code', 'country', 'latitude', 'longitude', 'source'))
      ->fields('lsp', array('phone'))
      ->fields('lsf', array('fax'))
      ->condition('n.type', 'proconnect', '=')
      ->condition('n.uid', $uid, '=');

  $query->addExpression('GROUP_CONCAT(DISTINCT cw.field_work_remotely_how_value)', 'work_remote');

  $query->addExpression('GROUP_CONCAT(DISTINCT cft.field_type_pro_value)', 'type_pro');

  $query->addExpression('GROUP_CONCAT(DISTINCT cfl.field_languages_value)', 'languages');

  $query->addExpression('GROUP_CONCAT(DISTINCT cfs.field_specialties_value)', 'field_specialties');

  $query->addExpression('GROUP_CONCAT(DISTINCT fcre.field_credentials_value)', 'simple_credentials');

  $query->addExpression('GROUP_CONCAT(DISTINCT cfc.field_coaching_orientation_value)', 'field_coaching_orientation');

  // Join with node revisions table
  $query->join('node_revisions', 'nr', 'n.vid = nr.vid');

  // Grab other fields which can mapping directly
  $query->leftJoin('content_type_proconnect', 'ct', 'ct.vid = n.vid');

  $query->leftJoin('content_field_work_remotely_how', 'cw', 'cw.vid = n.vid');

  $query->leftJoin('content_field_credentials', 'fcre', 'fcre.vid = n.vid');

  $query->leftJoin('content_field_type_pro', 'cft', 'cft.vid = n.vid');

  $query->leftJoin('content_field_specialties', 'cfs', 'cfs.vid = n.vid');

  $query->leftJoin('content_field_languages', 'cfl', 'cfl.vid = n.vid');

  // Grab other fields which can mapping directly
  $query->leftJoin('content_field_coaching_orientation', 'cfc', 'cfc.vid = n.vid');

  // Join with location table
  $query->leftJoin('location', 'l', 'l.lid = ct.field_office_address_lid');

  // Join with location table
  $query->leftJoin('location_phone', 'lp', 'lp.lid = ct.field_office_address_lid');

  // Join with location table
  $query->leftJoin('location_fax', 'lf', 'lf.lid = ct.field_office_address_lid');

  // Join with location table
  $query->leftJoin('location', 'ls', 'ls.lid = ct.field_secondary_address_lid');

  // Join with location table
  $query->leftJoin('location_phone', 'lsp', 'lsp.lid = ct.field_secondary_address_lid');

  // Join with location table
  $query->leftJoin('location_fax', 'lsf', 'lsf.lid = ct.field_secondary_address_lid');

  $values = $query->execute()->fetchAll();

  //watchdog('Proconnect Values', print_r($values, TRUE));

  return count($values) ? $values : NULL;
}

/**
 * Retrieve the associated
 * proconnect Success Stories nodes from the migration database.
 * @param type $uid
 */
function yt_migration_get_author_pets($nid) {
  $result = array();

  $connection = yt_migration_db_connection();

  $query = $connection->select('content_field_have_pets', 'ct')
      ->fields('ct', array('field_have_pets_value'))
      ->condition('ct.nid', $nid, '=');

  $values = $query->execute()->fetchAll();

  return count($values) ? $values : NULL;
}

/**
 * Retrieve the suggestion links
 * profile nodes from the migration database.
 * @param type $uid
 */
function yt_migration_get_suggestion_link($nid) {
  $result = array();

  $connection = yt_migration_db_connection();

  $query = $connection->select('content_field_suggested_link', 'cs')
      ->fields('cs', array('field_suggested_link_url', 'field_suggested_link_title', 'field_suggested_link_attributes', 'delta'))
      ->condition('cs.nid', $nid, '=');

  $values = $query->execute()->fetchAll();

  return count($values) ? $values : NULL;
}

/**
 * Retrieve the associated
 * proconnect Success Stories nodes from the migration database.
 * @param type $uid
 */
function yt_migration_get_pss_node($uid) {
  $result = array();
  $connection = yt_migration_db_connection();
  $query = $connection->select('node', 'n')
      ->fields('n', array('nid', 'vid', 'title', 'uid', 'status', 'created', 'changed', 'comment', 'promote', 'moderate', 'sticky', 'tnid', 'translate'))
      ->fields('ct', array('field_client_type_value'))
      ->fields('ci', array('field_embedded_video_image_fid', 'field_embedded_video_image_list', 'field_embedded_video_image_data'))
      ->fields('cv', array('field_embedded_video_embed', 'field_embedded_video_value', 'field_embedded_video_provider', 'field_embedded_video_data', 'field_embedded_video_version', 'field_embedded_video_duration'))
      ->condition('n.type', 'proconnect_success_story', '=')
      ->condition('n.uid', $uid, '=');

  // Join with node revisions table
  $query->join('node_revisions', 'nr', 'n.vid = nr.vid');

  // Grab other fields which can mapping directly
  $query->leftJoin('content_type_proconnect_success_story', 'ct', 'ct.vid = n.vid');

  // Grab embbed video fields which can mapping directly
  $query->leftJoin('content_field_embedded_video', 'cv', 'cv.vid = n.vid');

  // Grab embbed video image fields which can mapping directly
  $query->leftJoin('content_field_embedded_video_image', 'ci', 'ci.vid = n.vid');

  $values = $query->execute()->fetchAll();

  return count($values) ? $values : NULL;
}

/**
 * This content exclusive to your tango settings
 * @param type $nid
 */
function yt_migration_tango_exclusive($nid) {
  $result = array();
  $connection = yt_migration_db_connection();
  $query = $connection->select('tango_meta', 'tm')
      ->fields('tm', array('mid', 'object_type', 'object_id', 'path', 'title', 'keywords', 'description', 'canonical_url', 'website_name'))
      ->condition('tm.object_id', $nid, '=');
  $values = $query->execute()->fetchObject();

  return count($values) ? $values : NULL;
}

/**
 * This content exclusive to your tango settings
 * @param type $nid
 */
function yt_migration_list_images($nid) {
  $images_list = array();
  $connection = yt_migration_db_connection();
  $query = $connection->select('content_field_image_list', 'ct');
  $query->fields('ct', array('delta', 'field_image_list_fid', 'field_image_list_list', 'field_image_list_data'));
  $query->condition('ct.nid', $nid, '=');
  $query->orderBy('ct.delta', 'ASC');
  $result = $query->execute()->fetchAll();
  if (is_array($result)) {
    foreach ($result as $fid) {
      $data = unserialize($fid->field_image_list_data);
      $images_list['fids'][] = $fid->field_image_list_fid;
      $images_list['delta'][] = $fid->field_image_list_fid;
      $images_list['alt'][] = $data['alt'];
      $images_list['image_field_caption'][] = $data['alt'];
      $pattern = '/[0-9\.]+/';
      $replacement = '';
      $images_list['title'][] = preg_replace($pattern, $replacement, $data['title'], 1);
    }
  }
  return is_array($images_list) && !empty($images_list) ? $images_list : NULL;
}

/**
 *
 * @param type $entity
 * @param type $type
 */
function yt_migration_entity_delete($entity, $type) {
  switch ($type) {
    case 'profile2':
      if (db_table_exists('migrate_map_yourtangoauthor')) {
        db_delete('migrate_map_yourtangoauthor')->condition('destid1', $entity->pid)->execute();
      }
      break;
    case 'node':
      if ($entity->type == 'blog') {
        if (db_table_exists('migrate_map_yourtangoblog')) {
          db_delete('migrate_map_yourtangoblog')->condition('destid1', $entity->nid)->execute();
        }
        if (db_table_exists('migrate_map_yourtangofeature')) {
          db_delete('migrate_map_yourtangofeature')->condition('destid1', $entity->nid)->execute();
        }
      }
      else if (db_table_exists('migrate_map_yourtangolist') && $entity->type == 'list') {
        db_delete('migrate_map_yourtangolist')->condition('destid1', $entity->nid)->execute();
      }
      else if (db_table_exists('migrate_map_yourtangopage') && $entity->type == 'page') {
        db_delete('migrate_map_yourtangopage')->condition('destid1', $entity->nid)->execute();
      }
      else if (db_table_exists('migrate_map_yourtangopartnerlink') && $entity->type == 'partner_link') {
        db_delete('migrate_map_yourtangopartnerlink')->condition('destid1', $entity->nid)->execute();
      }
      else if (db_table_exists('migrate_map_yourtangoembbedvideo') && $entity->type == 'embedded_video') {
        db_delete('migrate_map_yourtangoembbedvideo')->condition('destid1', $entity->nid)->execute();
      }
      else if (db_table_exists('migrate_map_yourtangoexternalarticle') && $entity->type == 'partner_link') {
        db_delete('migrate_map_yourtangoexternalarticle')->condition('destid1', $entity->nid)->execute();
      }
      else if ($entity->type == 'lovefact') {
        if (db_table_exists('migrate_map_yourtangofactoflove')) {
          db_delete('migrate_map_yourtangofactoflove')->condition('destid1', $entity->nid)->execute();
        }
        if (db_table_exists('migrate_map_yourtangopartnerlink')) {
          db_delete('migrate_map_yourtangopartnerlink')->condition('destid1', $entity->nid)->execute();
        }
      }
      else if (db_table_exists('migrate_map_yourtangogallery') && $entity->type == 'node_gallery_gallery') {
        db_delete('migrate_map_yourtangogallery')->condition('destid1', $entity->nid)->execute();
      }
      else if (db_table_exists('migrate_map_yourtangogalleryimage') && $entity->type == 'node_gallery_item') {
        db_delete('migrate_map_yourtangogalleryimage')->condition('destid1', $entity->nid)->execute();
      }
      break;
    case 'file':
      if (db_table_exists('migrate_map_yourtangofile')) {
        db_delete('migrate_map_yourtangofile')->condition('destid1', $entity->fid)->execute();
      }
      break;
  }
}

/**
 * Meta Tag Save
 */
function yt_migration_node_metatag_save($entity, $row) {
  db_delete('metatag')
      ->condition('entity_type', 'node')
      ->condition('entity_id', $entity->nid)
      ->condition('revision_id', $entity->vid)
      ->execute();
  $new_metatags = array();
  $new_metatags['title']['value'] = !empty($row->metatag_title) ? $row->metatag_title : '';
  $new_metatags['description']['value'] = !empty($row->metatag_description) ? $row->metatag_description : '';
  //$new_metatags['abstract']['value'] = !empty($row->metatag_abstract) ? $row->metatag_abstract : '';
  $new_metatags['canonical']['value'] = !empty($row->field_meta_canonical_url) ? $row->field_meta_canonical_url : '';
  $new_metatags['robots']['value'] = $row->allow_index;
  $new_metatags['keywords']['value'] = !empty($row->metatag_keywords) ? $row->metatag_keywords : '';
  db_merge('metatag')
      ->key(array(
        'entity_type' => 'node',
        'entity_id' => $entity->nid,
        'language' => 'und',
        'revision_id' => $entity->vid,
      ))
      ->fields(array(
        'data' => serialize($new_metatags),
      ))
      ->execute();
}

/**
 * Meta Tag Save
 */
function yt_migration_term_metatag_save($entity, $row) {
  db_delete('metatag')
      ->condition('entity_type', 'taxonomy_term')
      ->condition('entity_id', $entity->tid)
      ->condition('revision_id', $entity->tid)
      ->execute();
  $new_metatags = array();
  $new_metatags['title']['value'] = !empty($row->metatag_title) ? $row->metatag_title : '';
  $new_metatags['description']['value'] = !empty($row->metatag_description) ? $row->metatag_description : '';
  //$new_metatags['abstract']['value'] = !empty($row->metatag_abstract) ? $row->metatag_abstract : '';
  $new_metatags['canonical']['value'] = !empty($row->field_meta_canonical_url) ? $row->field_meta_canonical_url : '';
  $new_metatags['robots']['value'] = $row->allow_index;
  $new_metatags['keywords']['value'] = !empty($row->metatag_keywords) ? $row->metatag_keywords : '';
  db_merge('metatag')
      ->key(array(
        'entity_type' => 'taxonomy_term',
        'entity_id' => $entity->tid,
        'language' => 'und',
        'revision_id' => $entity->tid,
      ))
      ->fields(array(
        'data' => serialize($new_metatags),
      ))
      ->execute();
}

/**
 *
 * @param type $entity
 * @param type $row
 */
function yt_migration_image_caption_save($entity, $row, $field_name = 'field_image_blog') {
  if ($row->image_caption != 'NULL' && $row->image_caption != '') {
    $columns = array('field_name', 'entity_type', 'entity_id', 'revision_id', 'bundle', 'delta', 'language', 'caption', 'caption_format');
    db_delete('field_image_field_caption')
        ->condition('field_name', $field_name)
        ->condition('entity_type', $entity->type)
        ->condition('entity_id', $entity->nid)
        ->condition('language', LANGUAGE_NONE)
        ->condition('delta', $id)
        ->execute();

    db_delete('field_image_field_caption_revision')
        ->condition('field_name', $field_name)
        ->condition('entity_type', $entity->type)
        ->condition('entity_id', $entity->nid)
        ->condition('language', LANGUAGE_NONE)
        ->condition('delta', $id)
        ->condition('revision_id', $entity->vid)
        ->execute();

    db_merge('field_image_field_caption')
        ->key(array(
          'field_name' => $field_name,
          'entity_id' => $entity->nid,
          'delta' => '0',
          'revision_id' => $entity->vid,
          'bundle' => $entity->type,
          'entity_type' => 'node',
          'language' => LANGUAGE_NONE
        ))
        ->fields(array(
          'caption' => $row->image_caption,
          'caption_format' => filter_default_format(),
        ))
        ->execute();

    db_merge('field_image_field_caption_revision')
        ->key(array(
          'field_name' => $field_name,
          'entity_id' => $entity->nid,
          'delta' => '0',
          'revision_id' => $entity->vid,
          'bundle' => $entity->type,
          'entity_type' => 'node',
          'language' => LANGUAGE_NONE
        ))
        ->fields(array(
          'caption' => $row->image_caption,
          'caption_format' => filter_default_format(),
        ))
        ->execute();
  }
}

/**
 *
 * @param type $entity
 * @param type $row
 */
function yt_migration_image_file_list_caption_save($entity, $row) {
  if (is_array($row->image_file_list_caption) && count($row->image_file_list_caption)) {
    foreach ($row->image_file_list_caption as $id => $value) {
      $columns = array('field_name', 'entity_type', 'entity_id', 'revision_id', 'bundle', 'delta', 'language', 'caption', 'caption_format');

      db_delete('field_image_field_caption')
          ->condition('field_name', 'field_image_list')
          ->condition('entity_type', $entity->type)
          ->condition('entity_id', $entity->nid)
          ->condition('language', LANGUAGE_NONE)
          ->condition('delta', $id)
          ->execute();

      db_delete('field_image_field_caption_revision')
          ->condition('field_name', 'field_image_list')
          ->condition('entity_type', $entity->type)
          ->condition('entity_id', $entity->nid)
          ->condition('language', LANGUAGE_NONE)
          ->condition('delta', $id)
          ->condition('revision_id', $entity->vid)
          ->execute();

      db_merge('field_image_field_caption')
          ->key(array(
            'field_name' => 'field_image_list',
            'entity_id' => $entity->nid,
            'delta' => $id,
            'revision_id' => $entity->vid,
            'bundle' => $entity->type,
            'entity_type' => 'node',
            'language' => LANGUAGE_NONE
          ))
          ->fields(array(
            'caption' => $value,
            'caption_format' => filter_default_format(),
          ))
          ->execute();

      db_merge('field_image_field_caption_revision')
          ->key(array(
            'field_name' => 'field_image_list',
            'entity_id' => $entity->nid,
            'delta' => $id,
            'revision_id' => $entity->vid,
            'bundle' => $entity->type,
            'entity_type' => 'node',
            'language' => LANGUAGE_NONE
          ))
          ->fields(array(
            'caption' => $value,
            'caption_format' => filter_default_format(),
          ))
          ->execute();
    }
  }
}

/**
 * Save Private message notification settings user basic
 */
function yt_migration_pm_email_notify_save($entity, $row) {
  if (!is_null($row->email_notify_is_enabled)) {
    db_merge('pm_email_notify')
        ->fields(array('email_notify_is_enabled' => $row->email_notify_is_enabled))
        ->key(array('user_id' => $entity->uid))
        ->execute();
  }
}

/**
 * Fetch Private Message Thread
 */
function yt_migration_fetch_message_thread($row) {
  $values = array();
  $result = array();
  $connection = yt_migration_db_connection();
  $query = $connection->select('pm_index', 'pi')
      ->fields('pi', array('mid', 'thread_id', 'uid', 'is_new', 'deleted'))
      ->condition('pi.mid', $row->old_mid, '=');
  $values = $query->execute()->fetchAll();
  return count($values) ? $values : NULL;
}

/**
 * Save Private Message Thread
 */
function yt_migration_save_message_thread($entity, $row) {
  $query = db_insert('pm_index')->fields(array('mid', 'thread_id', 'recipient', 'type', 'is_new', 'deleted'));
  foreach ($row->pm_index as $mid => $item) {
    $query->values(array(
      'mid' => $item->mid,
      'thread_id' => $item->thread_id,
      'recipient' => $item->uid,
      'type' => 'user',
      'is_new' => $item->is_new,
      'deleted' => $item->deleted,
    ));
  }
  $query->execute();
}

/**
 * This content embedded video fid
 * @param type $nid
 */
function yt_migration_get_video_fid($path, $provider) {
  if ($provider == 'youtube') {
    if (db_table_exists('migrate_map_yourtangoembbedvideoyoutube')) {
      $result = db_query("SELECT destid1 FROM migrate_map_yourtangoembbedvideoyoutube WHERE sourceid1 = :sourceid1", array(":sourceid1" => $path))->fetchObject();
    }
  }
  else {
    if (db_table_exists('migrate_map_yourtangoembbedvideobliptv')) {
      $result = db_query("SELECT destid1 FROM migrate_map_yourtangoembbedvideobliptv WHERE sourceid1 = :sourceid1", array(":sourceid1" => $path))->fetchObject();
    }
  }
  return is_object($result) && !empty($result->destid1) ? $result->destid1 : NULL;
}

/**
 * Save Experts Redirect
 * experts/%/contact
 * experts/%/articles
 * experts/%/books
 * experts/%/successstories
 * experts/%/free-consultation
 */
function yt_migration_experts_redirect($entity, $row) {
  if (strpos($row->dst, '/contact') !== FALSE ||
      strpos($row->dst, '/articles') !== FALSE ||
      strpos($row->dst, '/books') !== FALSE ||
      strpos($row->dst, '/success-stories') !== FALSE ||
      strpos($row->dst, '/free-consultation') !== FALSE) {
    $explode = explode('/', $row->src);
    $redirect = 'experts/' . $explode['1'];
    $check_redirect_old = db_select('redirect', 'r')->fields('r', array('redirect'))->condition('r.source', $row->dst, '=');
    $check_redirect_old_result = $check_redirect_old->execute()->fetch();
    if (!is_object($check_redirect_old_result) && empty($check_redirect_old_result->redirect)) {
      if (!empty($redirect) && !empty($row->dst)) {
        $object = array();
        $object['rid'] = '';
        $object['type'] = 'redirect';
        $object['hash'] = '';
        $object['source'] = $row->dst;
        $object['source_options'] = array();
        $object['redirect'] = $redirect;
        $object['redirect_options'] = array();
        $object['language'] = LANGUAGE_NONE;
        $object['status_code'] = '0';
        $object['override'] = '';
        $redirect = (object) $object;
        redirect_save($redirect);
      }
    }
  }
}

/**
 * Save Vanity Urls
 * */
function yt_migration_experts_vanity_url($entity, $row) {
  $array['experts'] = 'experts/' . $row->uid;
  $array['contact'] = 'experts/' . $row->uid . '/contact';
  $array['articles'] = 'experts/' . $row->uid . '/articles';
  $array['books'] = 'experts/' . $row->uid . '/books';
  $array['success-stories'] = 'experts/' . $row->uid . '/success-stories';
  $array['free-consultation'] = 'experts/' . $row->uid . '/free-consultation';
  foreach ($array as $id => $value) {
    db_delete('url_alias')->condition('source', $value)->execute();
    $connection = yt_migration_db_connection();
    $query = $connection->select('url_alias', 'ua')
        ->fields('ua', array('src', 'dst'))
        ->condition('ua.src', $value, '=');
    $query->orderBy('ua.pid', 'DESC');
    $result = $query->execute()->fetchObject();
    $system_path = $value;
    if (isset($result->dst) && !empty($result->dst)) {
      $new_alias = $result->dst;
      $main_alias = array('source' => $system_path, 'alias' => $new_alias);
      path_save($main_alias);
      if ($id != 'experts') {
        /*         * * Main URL Redirect * */
        $check_redirect_old = db_select('redirect', 'r')->fields('r', array('redirect'))->condition('r.source', $value, '=');
        $check_redirect_old_result = $check_redirect_old->execute()->fetch();
        if (!is_object($check_redirect_old_result) && empty($check_redirect_old_result->redirect)) {
          if (!empty($value) && !empty($array['experts'])) {
            $object = array();
            $object['rid'] = '';
            $object['type'] = 'redirect';
            $object['hash'] = '';
            $object['source'] = $value;
            $object['source_options'] = array();
            $object['redirect'] = $array['experts'];
            $object['redirect_options'] = array();
            $object['language'] = LANGUAGE_NONE;
            $object['status_code'] = '0';
            $object['override'] = '';
            $redirect = (object) $object;
            redirect_save($redirect);
          }
        }

        /*         * * Alias URL Redirect * */
        $check_redirect_new = db_select('redirect', 'r')->fields('r', array('redirect'))->condition('r.source', $new_alias, '=');
        $check_redirect_new_result = $check_redirect_new->execute()->fetch();
        if (!is_object($check_redirect_new_result) && empty($check_redirect_new_result->redirect)) {
          if (!empty($new_alias) && !empty($array['experts'])) {
            $object = array();
            $object['rid'] = '';
            $object['type'] = 'redirect';
            $object['hash'] = '';
            $object['source'] = $new_alias;
            $object['source_options'] = array();
            $object['redirect'] = $array['experts'];
            $object['redirect_options'] = array();
            $object['language'] = LANGUAGE_NONE;
            $object['status_code'] = '0';
            $object['override'] = '';
            $redirect = (object) $object;
            redirect_save($redirect);
          }
        }
      }
    }
  }
}

/**
 * Get My Specialities Values
 */
function yt_migration_get_main_specialities() {
  $values = array();
  $query = db_select('field_config', 'fc')
      ->fields('fc', array('data'))
      ->condition('fc.field_name', 'field_main_specialties', '=');
  $result = $query->execute()->fetch();
  $field_values = unserialize($result->data);
  $allowed_values = $field_values['settings']['allowed_values'];
  return $allowed_values;
}

/**
 *
 */
function yt_migration_geocoder_field_value($entity_type, $field_instance, $entity) {
  $entity_info = entity_get_info($entity_type);
  $handler['field_callback'] = 'geocoder_google';
  $field_name = is_array($field_instance['widget']['settings']['geocoder_field']) ? reset($field_instance['widget']['settings']['geocoder_field']) : $field_instance['widget']['settings']['geocoder_field'];
  $target_info = field_info_field($field_instance['field_name']);
  $target_type = $target_info['type'];

  // Determine the source type, if it's a entity-key, we mock it as a "text" field
  if (in_array($field_name, $entity_info['entity keys']) && $entity) {
    $field_info = array('type' => 'text', 'entity_key' => TRUE);
  }
  else {
    $field_info = field_info_field($field_name);
    $field_info['entity_key'] = FALSE;
  }

  // Get the source values
  if (!$source_field_values) {
    if ($field_info['entity_key'] && $entity) {
      $source_field_values = array(array('value' => $entity->$field_name));
    }
    else if ($entity) {
      $source_field_values = field_get_items($entity_type, $entity, $field_name, isset($entity->language) ? $entity->language : NULL);
    }
    else {
      // We can't find the source values
      return FALSE;
    }
  }

  // Remove source values that are not valid.
  if ($source_field_values) {
    foreach ($source_field_values as $delta => $item) {
      if (!is_numeric($delta)) {
        unset($source_field_values[$delta]);
      }
    }
  }
  // If no valid source values were passed.
  if (empty($source_field_values)) {
    return FALSE;
  }

  // For entities being updated, determine if another geocode is necessary
  if ($entity) {
    if (!empty($entity->original) && !empty($entity->original->$field_instance['field_name'])) {
      //@@TODO: Deal with entity-properties (non-fields)
      //@@TODO: This isn't working with file fields. Should use some kind of lookup / map
      $field_original = field_get_items($entity_type, $entity->original, $field_name, isset($entity->original->language) ? $entity->original->language : NULL);
      if (!empty($field_original)) {
        $diff = geocoder_widget_array_recursive_diff($field_original, $source_field_values);
        if (empty($diff)) {
          // If there is no diff return the previous value if there was one.
          return !empty($entity->{$field_instance['field_name']}) ? $entity->{$field_instance['field_name']} : FALSE;
        }
      }
    }
  }

  // Get the handler-specific-settings
  if (isset($field_instance['widget']['settings']['handler_settings'][$handler['name']])) {
    $handler_settings = $field_instance['widget']['settings']['handler_settings'][$handler['name']];
  }

  // Determine how we deal with deltas (multi-value fields)
  if (empty($field_instance['widget']['settings']['delta_handling'])) {
    $delta_handling = 'default';
  }
  else {
    $delta_handling = $field_instance['widget']['settings']['delta_handling'];
  }

  // Check to see if we should be concatenating
  if ($delta_handling == 'c_to_s' || $delta_handling == 'c_to_m') {
    $source_field_values = geocoder_widget_get_field_concat($source_field_values);
  }

  if (is_array($source_field_values) && count($source_field_values)) {
    $values = array();

    // Geocode geometries
    $geometries = array();
    foreach ($source_field_values as $delta => $item) {
      // Geocode any value from our source field.
      try {
        if (isset($handler_settings)) {
          $geometry = call_user_func($handler['field_callback'], $field_info, $item, $handler_settings);
        }
        else {
          $geometry = call_user_func($handler['field_callback'], $field_info, $item);
        }
        if ($geometry instanceof Geometry) {
          $geometries[] = $geometry;
        }
        else {
          // An error occured
          return FALSE;
        }
      }
      catch (Exception $e) {
        watchdog_exception('geocoder', $e);
        return FALSE;
      }
    }

    if (empty($geometries)) {
      // This field has no data, so set the field to an empty array in
      // order to delete its saved data.
      $values = array(NULL);
      return array();
    }
    else {
      // Resolve multiple-values - get back values from our delta-resolver
      $values = geocoder_widget_resolve_deltas($geometries, $delta_handling, $target_type);

      // Set the values - geofields do not support languages
      return array(LANGUAGE_NONE => $values);
    }
  }
}

/**
 * Migration script for Particular Blog Reference Image
 */
function yt_migration_ref_image($nid) {
  $connection = yt_migration_db_connection();
  $query = $connection->select('node', 'n')
      ->fields('f', array('filename', 'fid', 'filepath', 'fid'))
      ->condition('n.nid', $nid, '=')
      ->condition('im.image_size', '_original', '=');
  $query->join('image', 'im', 'im.nid = n.nid');
  $query->join('files', 'f', 'f.fid = im.fid');
  $result = $query->execute()->fetchObject();
  return $result->fid;
}


/**
 * Check file location
 * @param type $source
 * @param type $directory
 * @return string
 */
function yt_migration_file_check_location($source, $directory = '') {
  $check = realpath($source);
  if ($check) {
    $source = $check;
  } else {
    // This file does not yet exist
    $source = realpath(dirname($source)) . '/' . basename($source);
  }
  $directory = realpath($directory);
  if ($directory && strpos($source, $directory) !== 0) {
    return 0;
  }
  return $source;
}

/**
 * Handles category video pages alias in d6
 * And redirect them to videos sites.
 */
function yt_migration_taxonomy_alias_redirect($entity, $row) {
  
}
